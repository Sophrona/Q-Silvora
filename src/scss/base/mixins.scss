//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
//Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}
//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

//Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp('
      rem($startSize)
      ','
      $flyValue
      ','
      rem($minSize)
      ')'};
  }

  // Если поддерживается clamp();
  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }
  // Если не поддерживается clamp();
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(
      #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
          $widthFrom,
          16
        ) - math.div($widthTo, 16)}
    );
  }

  // Устанавливаем значения по умолчанию
  @if $widthFrom !=
    $containerWidth and
    $widthFrom !=
    $maxWidth and
    $keepSize !=
    1 and
    $keepSize !=
    2
  {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }
  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}

@mixin noMarginBottom {
  *:last-child {
    margin-bottom: 0;
  }
}

// Centered Cover Background
@mixin bgCenter($bgImg) {
  background: $bgImg;
  background-position: center center;
  background-size: cover;
}

// Gradient Text
@mixin gradientText($bg) {
  background: $bg;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

// Gradient Border
@mixin gradientBorder($bg, $border, $radius) {
  position: relative;
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: $radius;
    padding: $border;
    background: $bg;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask: linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
  }
}

// Common button
@mixin common-btn($borderColor, $borderWidth) {
  position: relative;
  display: block;
  text-align: center;
  transition: 0.5s;

  span {
    position: absolute;
    transition: transform 0.5s;
  }

  span:nth-child(1),
  span:nth-child(3) {
    width: $borderWidth;
    height: 100%;
    background: $borderColor;
  }

  span:nth-child(1) {
    top: 0;
    left: 0;
    transform-origin: right;
  }

  &:hover span:nth-child(2) {
    transform: scaleX(1);
    transform-origin: right;
    transition: transform 0.5s;
  }

  span:nth-child(3) {
    bottom: 0;
    right: 0;
    transform-origin: left;
  }

  &:hover span:nth-child(4) {
    transform: scaleX(1);
    transform-origin: left;
    transition: transform 0.5s;
  }

  span:nth-child(2),
  span:nth-child(4) {
    width: 100%;
    height: $borderWidth;
    background: $borderColor;
  }

  span:nth-child(2) {
    top: 0;
    left: 0;
    transform: scale(0);
    transform-origin: bottom;
  }

  &:hover span:nth-child(1) {
    transform: scale(0);
    transform-origin: bottom;
    transition: transform 0.5s;
  }

  span:nth-child(4) {
    bottom: 0;
    right: 0;
    transform: scale(0);
    transform-origin: top;
  }

  &:hover span:nth-child(3) {
    transform: scale(0);
    transform-origin: top;
    transition: transform 0.5s;
  }
}

// Media Queries

@mixin maxMac {
  @media screen and (max-width: $mac) {
    @content;
  }
}

@mixin minMac {
  @media screen and (min-width: $mac) {
    @content;
  }
}

@mixin maxTablet {
  @media screen and (max-width: $tablet) {
    @content;
  }
}

@mixin minTablet {
  @media screen and (min-width: $tablet) {
    @content;
  }
}

@mixin maxMobile {
  @media screen and (max-width: $mobile) {
    @content;
  }
}

@mixin minMobile {
  @media screen and (min-width: $mobile) {
    @content;
  }
}

@mixin maxMobileSmall {
  @media screen and (max-width: $mobileSmall) {
    @content;
  }
}

@mixin minMobileSmall {
  @media screen and (min-width: $mobileSmall) {
    @content;
  }
}
